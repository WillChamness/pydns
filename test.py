from pydns.dns_message.response import _get_name_from_pointer, _parse_name, _get_ipv4
from pydns.dns_message.query import parse_query

dns_response: bytes = b"".join([byte.to_bytes(1, "big", signed=False) for byte in [0xcd, 0x54, 0x81, 0x80, 0x0, 0x1, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x5, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x5, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x9, 0x6, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0xc0, 0x12, 0xc0, 0x2e, 0x0, 0x5, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0xb, 0x6, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x1, 0x6c, 0xc0, 0x12, 0xc0, 0x43, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x4, 0xac, 0xd9, 0xd7, 0x71, 0xc0, 0x43, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x4, 0xac, 0xd9, 0xd7, 0x65, 0xc0, 0x43, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x4, 0xac, 0xd9, 0xd7, 0x64, 0xc0, 0x43, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x4, 0xac, 0xd9, 0xd7, 0x8a, 0xc0, 0x43, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x4, 0xac, 0xd9, 0xd7, 0x8b, 0xc0, 0x43, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x4, 0xac, 0xd9, 0xd7, 0x66]])

_, response_start_index = parse_query(dns_response)
assert dns_response[response_start_index] == 0xc0

name, end_pointer = _get_name_from_pointer(dns_response, response_start_index)
assert name == "image.google.com"

# dns type
assert dns_response[end_pointer] == 0
assert dns_response[end_pointer+1] == 5
# dns class
assert dns_response[end_pointer+2] == 0
assert dns_response[end_pointer+3] == 1
# ttl
assert int.from_bytes(dns_response[end_pointer+4:end_pointer+8], "big", signed=False) == 300
# data length
assert dns_response[end_pointer+8] == 0
assert dns_response[end_pointer+9] == 9

cname, end_pointer = _get_name_from_pointer(dns_response, end_pointer+10)
assert cname == "images.google.com"



dns_response = b"".join(byte.to_bytes(1, "big", signed=False) for byte in [0x15, 0x15, 0x81, 0x80, 0x0, 0x1, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x4, 0x6d, 0x61, 0x70, 0x73, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x4, 0x6d, 0x61, 0x70, 0x73, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd3, 0x0, 0x4, 0x4a, 0x7d, 0x8a, 0x64, 0x4, 0x6d, 0x61, 0x70, 0x73, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd3, 0x0, 0x4, 0x4a, 0x7d, 0x8a, 0x66, 0x4, 0x6d, 0x61, 0x70, 0x73, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd3, 0x0, 0x4, 0x4a, 0x7d, 0x8a, 0x8b, 0x4, 0x6d, 0x61, 0x70, 0x73, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd3, 0x0, 0x4, 0x4a, 0x7d, 0x8a, 0x65, 0x4, 0x6d, 0x61, 0x70, 0x73, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd3, 0x0, 0x4, 0x4a, 0x7d, 0x8a, 0x8a, 0x4, 0x6d, 0x61, 0x70, 0x73, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd3, 0x0, 0x4, 0x4a, 0x7d, 0x8a, 0x71])

_, response_start_index = parse_query(dns_response)
assert dns_response[response_start_index] == 0x04

name, end_pointer = _parse_name(dns_response, response_start_index)
assert name == "maps.google.com"

# dns type
assert dns_response[end_pointer] == 0
assert dns_response[end_pointer+1] == 1
# dns class
assert dns_response[end_pointer+2] == 0
assert dns_response[end_pointer+3] == 1
# ttl
assert int.from_bytes(dns_response[end_pointer+4:end_pointer+8], "big", signed=False) == 211
# data length
assert dns_response[end_pointer+8] == 0
assert dns_response[end_pointer+9] == 4

address, end_pointer = _get_ipv4(dns_response, end_pointer+10)
assert address == "74.125.138.100"
